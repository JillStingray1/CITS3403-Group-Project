/* This javascript file was generated by AI tools */
// static/javascript/calendar.js

// â€” Helpers â€”

// Load saved tasks (or empty list). You can swap this out to fetch
// from your new /meeting/stats endpoint instead of localStorage.
function loadTasks() {
  return JSON.parse(localStorage.getItem('tasks') || '[]');
}

// Save tasks back. Again, replace if persisting server-side.
function saveTasks(tasks) {
  localStorage.setItem('tasks', JSON.stringify(tasks));
}

// Convert a Date object into 'YYYY-MM-DD' string
function localISO(d) {
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${y}-${m}-${day}`;
}

// Compare two Date objects just by their day
function isSameDay(a, b) {
  return a.getFullYear() === b.getFullYear()
      && a.getMonth()    === b.getMonth()
      && a.getDate()     === b.getDate();
}

// Format the "When" column: Today / Tomorrow / Weekday name
function formatWhen(isoDate) {
  const d = new Date(isoDate);
  const today = new Date();
  today.setHours(0,0,0,0);
  if (isSameDay(d, today)) return 'Today';
  const tomorrow = new Date(today);
  tomorrow.setDate(today.getDate() + 1);
  if (isSameDay(d, tomorrow)) return 'Tomorrow';
  return d.toLocaleString('default', { weekday: 'long' });
}

// â€” Render Activities â€”
// Populate the Current and Past tables
function renderActivities() {
  const all = loadTasks();
  const today = new Date();
  today.setHours(0,0,0,0);

  const curTbody = getTbodyBySectionHeader('Current Activities');
  const pastTbody = getTbodyBySectionHeader('Past Activities');
  if (!curTbody || !pastTbody) return; // Defensive: don't error if not found

  curTbody.innerHTML = '';
  pastTbody.innerHTML = '';

  all.forEach(t => {
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${t.name}</td>
      <td>${formatWhen(t.due)}</td>
      <td>${t.time}</td>
    `;
    const dueDate = new Date(t.due);
    if (dueDate < today) {
      pastTbody.appendChild(tr);
    } else {
      curTbody.appendChild(tr);
    }
  });
}

// â€” Render Calendar â€”
// Fill the grid for a given year/month
function renderCalendar(year, month) {
  const daysEl     = document.getElementById('calendar-days');
  daysEl.innerHTML = '';

  // Update header
  const title     = document.getElementById('calendar-title');
  const monthName = new Date(year, month)
    .toLocaleString('default', { month: 'long' });
  title.textContent = `${monthName} ${year}`;

  // Compute first weekday and number of days
  const firstWeekday = new Date(year, month, 1).getDay();
  const numDays      = new Date(year, month+1, 0).getDate();
  const today        = new Date();
  today.setHours(0,0,0,0);

  // Blanks for days before the 1st
  for (let i = 0; i < firstWeekday; i++) {
    const b = document.createElement('div');
    b.className = 'blank';
    daysEl.appendChild(b);
  }

  // Day cells
  const all = loadTasks();
  for (let d = 1; d <= numDays; d++) {
    const cell = document.createElement('div');
    const dt   = new Date(year, month, d);
    cell.textContent = d;

    // Highlight today
    if (isSameDay(dt, today)) {
      cell.classList.add('today');
    }

    daysEl.appendChild(cell);
  }

  // After rendering all day cells
  (window.activities || []).forEach(activity => {
    const activityDate = activity.due; // or activity.start_date
    const dt = new Date(activityDate);
    // Find the cell for this exact date (year, month, day)
    const cell = [...document.querySelectorAll('.calendar-days div')]
      .find(div => {
        if (div.classList.contains('blank')) return false;
        const cellDay = Number(div.textContent);
        // Get the current calendar view's year and month from the header
        const [monthName, yearStr] = document.getElementById('calendar-title').textContent.split(' ');
        const cellMonth = new Date(Date.parse(monthName +" 1, 2020")).getMonth();
        const cellYear = Number(yearStr);
        return (
          cellDay === dt.getDate() &&
          cellMonth === dt.getMonth() &&
          cellYear === dt.getFullYear()
        );
      });
    if (cell && isSameDay(dt, today)) {
      cell.classList.add('has-activity');
      cell.addEventListener('mouseenter', e => {
        document.querySelectorAll('.tooltip').forEach(tip => tip.remove());
        const tip = document.createElement('div');
        tip.className = 'tooltip';
        tip.innerHTML = `<div class="item"><span class="icon">ðŸ“…</span> ${activity.name}</div>`;
        document.body.appendChild(tip);
        const r = e.target.getBoundingClientRect();
        tip.style.top  = `${r.top - tip.offsetHeight - 8}px`;
        tip.style.left = `${r.left + r.width/2 - tip.offsetWidth/2}px`;
        e.target._tooltip = tip;
      });
      cell.addEventListener('mouseleave', e => {
        if (e.target._tooltip) {
          e.target._tooltip.remove();
          e.target._tooltip = null;
        }
      });
    }
  });
}

// â€” Initialize & Wire Controls â€”
document.addEventListener('DOMContentLoaded', () => {
  // Render initial view
  let view       = new Date();
  let viewYear   = view.getFullYear();
  let viewMonth  = view.getMonth();

  renderActivities();
  renderCalendar(viewYear, viewMonth);

  // Prev / Next month buttons
  document.getElementById('prev-month').addEventListener('click', () => {
    viewMonth--;
    if (viewMonth < 0) { viewMonth = 11; viewYear--; }
    renderCalendar(viewYear, viewMonth);
  });
  document.getElementById('next-month').addEventListener('click', () => {
    viewMonth++;
    if (viewMonth > 11) { viewMonth = 0; viewYear++; }
    renderCalendar(viewYear, viewMonth);
  });
});

function getTbodyBySectionHeader(headerText) {
  // Find all section headers
  const headers = document.querySelectorAll('.card-section-header h2');
  for (const h2 of headers) {
    if (h2.textContent.trim() === headerText) {
      // Find the next .card table tbody after this header
      const section = h2.closest('.card-section');
      if (section) {
        const tbody = section.querySelector('table tbody');
        if (tbody) return tbody;
      }
    }
  }
  return null;
}

// Usage:
const curTbody = getTbodyBySectionHeader('Current Activities');
const pastTbody = getTbodyBySectionHeader('Past Activities');
